[0m[1mmodule.VPCs.data.aws_availability_zones.available: Reading...[0m[0m
[0m[1mmodule.terraform_state_backend.data.aws_region.current: Reading...[0m[0m
[0m[1mmodule.terraform_state_backend.data.aws_iam_policy_document.bucket_policy[0]: Reading...[0m[0m
[0m[1mmodule.terraform_state_backend.data.aws_region.current: Read complete after 0s [id=us-east-1][0m
[0m[1mmodule.terraform_state_backend.data.aws_iam_policy_document.bucket_policy[0]: Read complete after 0s [id=1724025303][0m
[0m[1mmodule.terraform_state_backend.data.aws_iam_policy_document.aggregated_policy[0]: Reading...[0m[0m
[0m[1mmodule.terraform_state_backend.data.aws_iam_policy_document.aggregated_policy[0]: Read complete after 0s [id=1724025303][0m
[0m[1mmodule.VPCs.data.aws_availability_zones.available: Read complete after 2s [id=us-east-1][0m

Terraform used the selected providers to generate the following execution
plan. Resource actions are indicated with the following symbols:
  [32m+[0m create[0m

Terraform will perform the following actions:

[1m  # module.VPCs.aws_eip.nat_eip[0m will be created
[0m  [32m+[0m[0m resource "aws_eip" "nat_eip" {
      [32m+[0m[0m allocation_id        = (known after apply)
      [32m+[0m[0m arn                  = (known after apply)
      [32m+[0m[0m association_id       = (known after apply)
      [32m+[0m[0m carrier_ip           = (known after apply)
      [32m+[0m[0m customer_owned_ip    = (known after apply)
      [32m+[0m[0m domain               = "vpc"
      [32m+[0m[0m id                   = (known after apply)
      [32m+[0m[0m instance             = (known after apply)
      [32m+[0m[0m ipam_pool_id         = (known after apply)
      [32m+[0m[0m network_border_group = (known after apply)
      [32m+[0m[0m network_interface    = (known after apply)
      [32m+[0m[0m private_dns          = (known after apply)
      [32m+[0m[0m private_ip           = (known after apply)
      [32m+[0m[0m ptr_record           = (known after apply)
      [32m+[0m[0m public_dns           = (known after apply)
      [32m+[0m[0m public_ip            = (known after apply)
      [32m+[0m[0m public_ipv4_pool     = (known after apply)
      [32m+[0m[0m region               = "us-east-1"
      [32m+[0m[0m tags                 = {
          [32m+[0m[0m "Name" = "NAT Gateway EIP"
        }
      [32m+[0m[0m tags_all             = {
          [32m+[0m[0m "Name" = "NAT Gateway EIP"
        }
    }

[1m  # module.VPCs.aws_internet_gateway.igw[0m will be created
[0m  [32m+[0m[0m resource "aws_internet_gateway" "igw" {
      [32m+[0m[0m arn      = (known after apply)
      [32m+[0m[0m id       = (known after apply)
      [32m+[0m[0m owner_id = (known after apply)
      [32m+[0m[0m region   = "us-east-1"
      [32m+[0m[0m tags     = {
          [32m+[0m[0m "Name" = "igw vpc virginia"
        }
      [32m+[0m[0m tags_all = {
          [32m+[0m[0m "Name" = "igw vpc virginia"
        }
      [32m+[0m[0m vpc_id   = (known after apply)
    }

[1m  # module.VPCs.aws_nat_gateway.nat_gw[0m will be created
[0m  [32m+[0m[0m resource "aws_nat_gateway" "nat_gw" {
      [32m+[0m[0m allocation_id                      = (known after apply)
      [32m+[0m[0m association_id                     = (known after apply)
      [32m+[0m[0m connectivity_type                  = "public"
      [32m+[0m[0m id                                 = (known after apply)
      [32m+[0m[0m network_interface_id               = (known after apply)
      [32m+[0m[0m private_ip                         = (known after apply)
      [32m+[0m[0m public_ip                          = (known after apply)
      [32m+[0m[0m region                             = "us-east-1"
      [32m+[0m[0m secondary_private_ip_address_count = (known after apply)
      [32m+[0m[0m secondary_private_ip_addresses     = (known after apply)
      [32m+[0m[0m subnet_id                          = (known after apply)
      [32m+[0m[0m tags                               = {
          [32m+[0m[0m "Name" = "NAT Gateway"
        }
      [32m+[0m[0m tags_all                           = {
          [32m+[0m[0m "Name" = "NAT Gateway"
        }
    }

[1m  # module.VPCs.aws_route_table.private_crt[0m will be created
[0m  [32m+[0m[0m resource "aws_route_table" "private_crt" {
      [32m+[0m[0m arn              = (known after apply)
      [32m+[0m[0m id               = (known after apply)
      [32m+[0m[0m owner_id         = (known after apply)
      [32m+[0m[0m propagating_vgws = (known after apply)
      [32m+[0m[0m region           = "us-east-1"
      [32m+[0m[0m route            = [
          [32m+[0m[0m {
              [32m+[0m[0m cidr_block                 = "0.0.0.0/0"
              [32m+[0m[0m nat_gateway_id             = (known after apply)
                [90m# (11 unchanged attributes hidden)[0m[0m
            },
        ]
      [32m+[0m[0m tags             = {
          [32m+[0m[0m "Name" = "private crt"
        }
      [32m+[0m[0m tags_all         = {
          [32m+[0m[0m "Name" = "private crt"
        }
      [32m+[0m[0m vpc_id           = (known after apply)
    }

[1m  # module.VPCs.aws_route_table.public_crt[0m will be created
[0m  [32m+[0m[0m resource "aws_route_table" "public_crt" {
      [32m+[0m[0m arn              = (known after apply)
      [32m+[0m[0m id               = (known after apply)
      [32m+[0m[0m owner_id         = (known after apply)
      [32m+[0m[0m propagating_vgws = (known after apply)
      [32m+[0m[0m region           = "us-east-1"
      [32m+[0m[0m route            = [
          [32m+[0m[0m {
              [32m+[0m[0m cidr_block                 = "0.0.0.0/0"
              [32m+[0m[0m gateway_id                 = (known after apply)
                [90m# (11 unchanged attributes hidden)[0m[0m
            },
        ]
      [32m+[0m[0m tags             = {
          [32m+[0m[0m "Name" = "public crt"
        }
      [32m+[0m[0m tags_all         = {
          [32m+[0m[0m "Name" = "public crt"
        }
      [32m+[0m[0m vpc_id           = (known after apply)
    }

[1m  # module.VPCs.aws_route_table_association.crta_private_subnet["private_subnet-0"][0m will be created
[0m  [32m+[0m[0m resource "aws_route_table_association" "crta_private_subnet" {
      [32m+[0m[0m id             = (known after apply)
      [32m+[0m[0m region         = "us-east-1"
      [32m+[0m[0m route_table_id = (known after apply)
      [32m+[0m[0m subnet_id      = (known after apply)
    }

[1m  # module.VPCs.aws_route_table_association.crta_private_subnet["private_subnet-1"][0m will be created
[0m  [32m+[0m[0m resource "aws_route_table_association" "crta_private_subnet" {
      [32m+[0m[0m id             = (known after apply)
      [32m+[0m[0m region         = "us-east-1"
      [32m+[0m[0m route_table_id = (known after apply)
      [32m+[0m[0m subnet_id      = (known after apply)
    }

[1m  # module.VPCs.aws_route_table_association.crta_public_subnet["public_subnet-0"][0m will be created
[0m  [32m+[0m[0m resource "aws_route_table_association" "crta_public_subnet" {
      [32m+[0m[0m id             = (known after apply)
      [32m+[0m[0m region         = "us-east-1"
      [32m+[0m[0m route_table_id = (known after apply)
      [32m+[0m[0m subnet_id      = (known after apply)
    }

[1m  # module.VPCs.aws_route_table_association.crta_public_subnet["public_subnet-1"][0m will be created
[0m  [32m+[0m[0m resource "aws_route_table_association" "crta_public_subnet" {
      [32m+[0m[0m id             = (known after apply)
      [32m+[0m[0m region         = "us-east-1"
      [32m+[0m[0m route_table_id = (known after apply)
      [32m+[0m[0m subnet_id      = (known after apply)
    }

[1m  # module.VPCs.aws_security_group.sg_public_instance[0m will be created
[0m  [32m+[0m[0m resource "aws_security_group" "sg_public_instance" {
      [32m+[0m[0m arn                    = (known after apply)
      [32m+[0m[0m description            = "Allow SSH inbound traffic and ALL egress traffic"
      [32m+[0m[0m egress                 = [
          [32m+[0m[0m {
              [32m+[0m[0m cidr_blocks      = [
                  [32m+[0m[0m "0.0.0.0/0",
                ]
              [32m+[0m[0m from_port        = 0
              [32m+[0m[0m ipv6_cidr_blocks = [
                  [32m+[0m[0m "::/0",
                ]
              [32m+[0m[0m prefix_list_ids  = []
              [32m+[0m[0m protocol         = "-1"
              [32m+[0m[0m security_groups  = []
              [32m+[0m[0m self             = false
              [32m+[0m[0m to_port          = 0
                [90m# (1 unchanged attribute hidden)[0m[0m
            },
        ]
      [32m+[0m[0m id                     = (known after apply)
      [32m+[0m[0m ingress                = [
          [32m+[0m[0m {
              [32m+[0m[0m cidr_blocks      = [
                  [32m+[0m[0m "0.0.0.0/0",
                ]
              [32m+[0m[0m from_port        = 22
              [32m+[0m[0m ipv6_cidr_blocks = []
              [32m+[0m[0m prefix_list_ids  = []
              [32m+[0m[0m protocol         = "tcp"
              [32m+[0m[0m security_groups  = []
              [32m+[0m[0m self             = false
              [32m+[0m[0m to_port          = 22
                [90m# (1 unchanged attribute hidden)[0m[0m
            },
          [32m+[0m[0m {
              [32m+[0m[0m cidr_blocks      = [
                  [32m+[0m[0m "0.0.0.0/0",
                ]
              [32m+[0m[0m from_port        = 443
              [32m+[0m[0m ipv6_cidr_blocks = []
              [32m+[0m[0m prefix_list_ids  = []
              [32m+[0m[0m protocol         = "tcp"
              [32m+[0m[0m security_groups  = []
              [32m+[0m[0m self             = false
              [32m+[0m[0m to_port          = 443
                [90m# (1 unchanged attribute hidden)[0m[0m
            },
          [32m+[0m[0m {
              [32m+[0m[0m cidr_blocks      = [
                  [32m+[0m[0m "0.0.0.0/0",
                ]
              [32m+[0m[0m from_port        = 80
              [32m+[0m[0m ipv6_cidr_blocks = []
              [32m+[0m[0m prefix_list_ids  = []
              [32m+[0m[0m protocol         = "tcp"
              [32m+[0m[0m security_groups  = []
              [32m+[0m[0m self             = false
              [32m+[0m[0m to_port          = 80
                [90m# (1 unchanged attribute hidden)[0m[0m
            },
        ]
      [32m+[0m[0m name                   = "Public Instance SG"
      [32m+[0m[0m name_prefix            = (known after apply)
      [32m+[0m[0m owner_id               = (known after apply)
      [32m+[0m[0m region                 = "us-east-1"
      [32m+[0m[0m revoke_rules_on_delete = false
      [32m+[0m[0m tags                   = {
          [32m+[0m[0m "Name" = "Public Instance SG"
        }
      [32m+[0m[0m tags_all               = {
          [32m+[0m[0m "Name" = "Public Instance SG"
        }
      [32m+[0m[0m vpc_id                 = (known after apply)
    }

[1m  # module.VPCs.aws_subnet.private_subnet["private_subnet-0"][0m will be created
[0m  [32m+[0m[0m resource "aws_subnet" "private_subnet" {
      [32m+[0m[0m arn                                            = (known after apply)
      [32m+[0m[0m assign_ipv6_address_on_creation                = false
      [32m+[0m[0m availability_zone                              = "us-east-1a"
      [32m+[0m[0m availability_zone_id                           = (known after apply)
      [32m+[0m[0m cidr_block                                     = "10.90.0.64/27"
      [32m+[0m[0m enable_dns64                                   = false
      [32m+[0m[0m enable_resource_name_dns_a_record_on_launch    = false
      [32m+[0m[0m enable_resource_name_dns_aaaa_record_on_launch = false
      [32m+[0m[0m id                                             = (known after apply)
      [32m+[0m[0m ipv6_cidr_block_association_id                 = (known after apply)
      [32m+[0m[0m ipv6_native                                    = false
      [32m+[0m[0m map_public_ip_on_launch                        = false
      [32m+[0m[0m owner_id                                       = (known after apply)
      [32m+[0m[0m private_dns_hostname_type_on_launch            = (known after apply)
      [32m+[0m[0m region                                         = "us-east-1"
      [32m+[0m[0m tags                                           = {
          [32m+[0m[0m "Name" = "private_subnet-0"
        }
      [32m+[0m[0m tags_all                                       = {
          [32m+[0m[0m "Name" = "private_subnet-0"
        }
      [32m+[0m[0m vpc_id                                         = (known after apply)
    }

[1m  # module.VPCs.aws_subnet.private_subnet["private_subnet-1"][0m will be created
[0m  [32m+[0m[0m resource "aws_subnet" "private_subnet" {
      [32m+[0m[0m arn                                            = (known after apply)
      [32m+[0m[0m assign_ipv6_address_on_creation                = false
      [32m+[0m[0m availability_zone                              = "us-east-1b"
      [32m+[0m[0m availability_zone_id                           = (known after apply)
      [32m+[0m[0m cidr_block                                     = "10.90.0.96/27"
      [32m+[0m[0m enable_dns64                                   = false
      [32m+[0m[0m enable_resource_name_dns_a_record_on_launch    = false
      [32m+[0m[0m enable_resource_name_dns_aaaa_record_on_launch = false
      [32m+[0m[0m id                                             = (known after apply)
      [32m+[0m[0m ipv6_cidr_block_association_id                 = (known after apply)
      [32m+[0m[0m ipv6_native                                    = false
      [32m+[0m[0m map_public_ip_on_launch                        = false
      [32m+[0m[0m owner_id                                       = (known after apply)
      [32m+[0m[0m private_dns_hostname_type_on_launch            = (known after apply)
      [32m+[0m[0m region                                         = "us-east-1"
      [32m+[0m[0m tags                                           = {
          [32m+[0m[0m "Name" = "private_subnet-1"
        }
      [32m+[0m[0m tags_all                                       = {
          [32m+[0m[0m "Name" = "private_subnet-1"
        }
      [32m+[0m[0m vpc_id                                         = (known after apply)
    }

[1m  # module.VPCs.aws_subnet.public_subnet["public_subnet-0"][0m will be created
[0m  [32m+[0m[0m resource "aws_subnet" "public_subnet" {
      [32m+[0m[0m arn                                            = (known after apply)
      [32m+[0m[0m assign_ipv6_address_on_creation                = false
      [32m+[0m[0m availability_zone                              = "us-east-1a"
      [32m+[0m[0m availability_zone_id                           = (known after apply)
      [32m+[0m[0m cidr_block                                     = "10.90.0.0/27"
      [32m+[0m[0m enable_dns64                                   = false
      [32m+[0m[0m enable_resource_name_dns_a_record_on_launch    = false
      [32m+[0m[0m enable_resource_name_dns_aaaa_record_on_launch = false
      [32m+[0m[0m id                                             = (known after apply)
      [32m+[0m[0m ipv6_cidr_block_association_id                 = (known after apply)
      [32m+[0m[0m ipv6_native                                    = false
      [32m+[0m[0m map_public_ip_on_launch                        = true
      [32m+[0m[0m owner_id                                       = (known after apply)
      [32m+[0m[0m private_dns_hostname_type_on_launch            = (known after apply)
      [32m+[0m[0m region                                         = "us-east-1"
      [32m+[0m[0m tags                                           = {
          [32m+[0m[0m "Name" = "public_subnet-0"
        }
      [32m+[0m[0m tags_all                                       = {
          [32m+[0m[0m "Name" = "public_subnet-0"
        }
      [32m+[0m[0m vpc_id                                         = (known after apply)
    }

[1m  # module.VPCs.aws_subnet.public_subnet["public_subnet-1"][0m will be created
[0m  [32m+[0m[0m resource "aws_subnet" "public_subnet" {
      [32m+[0m[0m arn                                            = (known after apply)
      [32m+[0m[0m assign_ipv6_address_on_creation                = false
      [32m+[0m[0m availability_zone                              = "us-east-1b"
      [32m+[0m[0m availability_zone_id                           = (known after apply)
      [32m+[0m[0m cidr_block                                     = "10.90.0.32/27"
      [32m+[0m[0m enable_dns64                                   = false
      [32m+[0m[0m enable_resource_name_dns_a_record_on_launch    = false
      [32m+[0m[0m enable_resource_name_dns_aaaa_record_on_launch = false
      [32m+[0m[0m id                                             = (known after apply)
      [32m+[0m[0m ipv6_cidr_block_association_id                 = (known after apply)
      [32m+[0m[0m ipv6_native                                    = false
      [32m+[0m[0m map_public_ip_on_launch                        = true
      [32m+[0m[0m owner_id                                       = (known after apply)
      [32m+[0m[0m private_dns_hostname_type_on_launch            = (known after apply)
      [32m+[0m[0m region                                         = "us-east-1"
      [32m+[0m[0m tags                                           = {
          [32m+[0m[0m "Name" = "public_subnet-1"
        }
      [32m+[0m[0m tags_all                                       = {
          [32m+[0m[0m "Name" = "public_subnet-1"
        }
      [32m+[0m[0m vpc_id                                         = (known after apply)
    }

[1m  # module.VPCs.aws_vpc.vpc_virginia[0m will be created
[0m  [32m+[0m[0m resource "aws_vpc" "vpc_virginia" {
      [32m+[0m[0m arn                                  = (known after apply)
      [32m+[0m[0m cidr_block                           = "10.90.0.0/24"
      [32m+[0m[0m default_network_acl_id               = (known after apply)
      [32m+[0m[0m default_route_table_id               = (known after apply)
      [32m+[0m[0m default_security_group_id            = (known after apply)
      [32m+[0m[0m dhcp_options_id                      = (known after apply)
      [32m+[0m[0m enable_dns_hostnames                 = (known after apply)
      [32m+[0m[0m enable_dns_support                   = true
      [32m+[0m[0m enable_network_address_usage_metrics = (known after apply)
      [32m+[0m[0m id                                   = (known after apply)
      [32m+[0m[0m instance_tenancy                     = "default"
      [32m+[0m[0m ipv6_association_id                  = (known after apply)
      [32m+[0m[0m ipv6_cidr_block                      = (known after apply)
      [32m+[0m[0m ipv6_cidr_block_network_border_group = (known after apply)
      [32m+[0m[0m main_route_table_id                  = (known after apply)
      [32m+[0m[0m owner_id                             = (known after apply)
      [32m+[0m[0m region                               = "us-east-1"
      [32m+[0m[0m tags                                 = {
          [32m+[0m[0m "IAC"         = "Terraform"
          [32m+[0m[0m "IAC_Version" = "1.12.2"
          [32m+[0m[0m "Name"        = "vpc-amrize_vpc"
          [32m+[0m[0m "cloud"       = "AWS"
          [32m+[0m[0m "date"        = "2025-07-22"
          [32m+[0m[0m "owner"       = "Alejandro Higuita"
          [32m+[0m[0m "project"     = "Amrize technical test"
          [32m+[0m[0m "region"      = "virginia"
        }
      [32m+[0m[0m tags_all                             = {
          [32m+[0m[0m "IAC"         = "Terraform"
          [32m+[0m[0m "IAC_Version" = "1.12.2"
          [32m+[0m[0m "Name"        = "vpc-amrize_vpc"
          [32m+[0m[0m "cloud"       = "AWS"
          [32m+[0m[0m "date"        = "2025-07-22"
          [32m+[0m[0m "owner"       = "Alejandro Higuita"
          [32m+[0m[0m "project"     = "Amrize technical test"
          [32m+[0m[0m "region"      = "virginia"
        }
    }

[1m  # module.terraform_state_backend.aws_dynamodb_table.with_server_side_encryption[0][0m will be created
[0m  [32m+[0m[0m resource "aws_dynamodb_table" "with_server_side_encryption" {
      [32m+[0m[0m arn                         = (known after apply)
      [32m+[0m[0m billing_mode                = "PAY_PER_REQUEST"
      [32m+[0m[0m deletion_protection_enabled = false
      [32m+[0m[0m hash_key                    = "LockID"
      [32m+[0m[0m id                          = (known after apply)
      [32m+[0m[0m name                        = "amrizetesting-test-terraform-state-lock"
      [32m+[0m[0m read_capacity               = (known after apply)
      [32m+[0m[0m region                      = "us-east-1"
      [32m+[0m[0m stream_arn                  = (known after apply)
      [32m+[0m[0m stream_label                = (known after apply)
      [32m+[0m[0m stream_view_type            = (known after apply)
      [32m+[0m[0m tags                        = {
          [32m+[0m[0m "Attributes" = "state-lock"
          [32m+[0m[0m "Name"       = "amrizetesting-test-terraform-state-lock"
          [32m+[0m[0m "Namespace"  = "amrizetesting"
          [32m+[0m[0m "Stage"      = "test"
        }
      [32m+[0m[0m tags_all                    = {
          [32m+[0m[0m "Attributes" = "state-lock"
          [32m+[0m[0m "Name"       = "amrizetesting-test-terraform-state-lock"
          [32m+[0m[0m "Namespace"  = "amrizetesting"
          [32m+[0m[0m "Stage"      = "test"
        }
      [32m+[0m[0m write_capacity              = (known after apply)

      [32m+[0m[0m attribute {
          [32m+[0m[0m name = "LockID"
          [32m+[0m[0m type = "S"
        }

      [32m+[0m[0m point_in_time_recovery {
          [32m+[0m[0m enabled                 = true
          [32m+[0m[0m recovery_period_in_days = (known after apply)
        }

      [32m+[0m[0m server_side_encryption {
          [32m+[0m[0m enabled     = true
          [32m+[0m[0m kms_key_arn = (known after apply)
        }

      [32m+[0m[0m ttl (known after apply)
    }

[1m  # module.terraform_state_backend.aws_s3_bucket.default[0][0m will be created
[0m  [32m+[0m[0m resource "aws_s3_bucket" "default" {
      [32m+[0m[0m acceleration_status         = (known after apply)
      [32m+[0m[0m acl                         = (known after apply)
      [32m+[0m[0m arn                         = (known after apply)
      [32m+[0m[0m bucket                      = "amrizetesting-test-terraform-state"
      [32m+[0m[0m bucket_domain_name          = (known after apply)
      [32m+[0m[0m bucket_prefix               = (known after apply)
      [32m+[0m[0m bucket_region               = (known after apply)
      [32m+[0m[0m bucket_regional_domain_name = (known after apply)
      [32m+[0m[0m force_destroy               = false
      [32m+[0m[0m hosted_zone_id              = (known after apply)
      [32m+[0m[0m id                          = (known after apply)
      [32m+[0m[0m object_lock_enabled         = (known after apply)
      [32m+[0m[0m policy                      = (known after apply)
      [32m+[0m[0m region                      = "us-east-1"
      [32m+[0m[0m request_payer               = (known after apply)
      [32m+[0m[0m tags                        = {
          [32m+[0m[0m "Attributes" = "state"
          [32m+[0m[0m "Name"       = "amrizetesting-test-terraform-state"
          [32m+[0m[0m "Namespace"  = "amrizetesting"
          [32m+[0m[0m "Stage"      = "test"
        }
      [32m+[0m[0m tags_all                    = {
          [32m+[0m[0m "Attributes" = "state"
          [32m+[0m[0m "Name"       = "amrizetesting-test-terraform-state"
          [32m+[0m[0m "Namespace"  = "amrizetesting"
          [32m+[0m[0m "Stage"      = "test"
        }
      [32m+[0m[0m website_domain              = (known after apply)
      [32m+[0m[0m website_endpoint            = (known after apply)

      [32m+[0m[0m cors_rule (known after apply)

      [32m+[0m[0m grant (known after apply)

      [32m+[0m[0m lifecycle_rule (known after apply)

      [32m+[0m[0m logging (known after apply)

      [32m+[0m[0m object_lock_configuration (known after apply)

      [32m+[0m[0m replication_configuration (known after apply)

      [32m+[0m[0m server_side_encryption_configuration (known after apply)

      [32m+[0m[0m versioning (known after apply)

      [32m+[0m[0m website (known after apply)
    }

[1m  # module.terraform_state_backend.aws_s3_bucket_ownership_controls.default[0][0m will be created
[0m  [32m+[0m[0m resource "aws_s3_bucket_ownership_controls" "default" {
      [32m+[0m[0m bucket = (known after apply)
      [32m+[0m[0m id     = (known after apply)
      [32m+[0m[0m region = "us-east-1"

      [32m+[0m[0m rule {
          [32m+[0m[0m object_ownership = "BucketOwnerEnforced"
        }
    }

[1m  # module.terraform_state_backend.aws_s3_bucket_policy.default[0][0m will be created
[0m  [32m+[0m[0m resource "aws_s3_bucket_policy" "default" {
      [32m+[0m[0m bucket = (known after apply)
      [32m+[0m[0m id     = (known after apply)
      [32m+[0m[0m policy = jsonencode(
            {
              [32m+[0m[0m Statement = [
                  [32m+[0m[0m {
                      [32m+[0m[0m Action    = "s3:PutObject"
                      [32m+[0m[0m Condition = {
                          [32m+[0m[0m StringNotEquals = {
                              [32m+[0m[0m "s3:x-amz-server-side-encryption" = [
                                  [32m+[0m[0m "AES256",
                                  [32m+[0m[0m "aws:kms",
                                ]
                            }
                        }
                      [32m+[0m[0m Effect    = "Deny"
                      [32m+[0m[0m Principal = {
                          [32m+[0m[0m AWS = "*"
                        }
                      [32m+[0m[0m Resource  = "arn:aws:s3:::amrizetesting-test-terraform-state/*"
                      [32m+[0m[0m Sid       = "DenyIncorrectEncryptionHeader"
                    },
                  [32m+[0m[0m {
                      [32m+[0m[0m Action    = "s3:PutObject"
                      [32m+[0m[0m Condition = {
                          [32m+[0m[0m Null = {
                              [32m+[0m[0m "s3:x-amz-server-side-encryption" = "true"
                            }
                        }
                      [32m+[0m[0m Effect    = "Deny"
                      [32m+[0m[0m Principal = {
                          [32m+[0m[0m AWS = "*"
                        }
                      [32m+[0m[0m Resource  = "arn:aws:s3:::amrizetesting-test-terraform-state/*"
                      [32m+[0m[0m Sid       = "DenyUnEncryptedObjectUploads"
                    },
                  [32m+[0m[0m {
                      [32m+[0m[0m Action    = "s3:*"
                      [32m+[0m[0m Condition = {
                          [32m+[0m[0m Bool = {
                              [32m+[0m[0m "aws:SecureTransport" = "false"
                            }
                        }
                      [32m+[0m[0m Effect    = "Deny"
                      [32m+[0m[0m Principal = {
                          [32m+[0m[0m AWS = "*"
                        }
                      [32m+[0m[0m Resource  = [
                          [32m+[0m[0m "arn:aws:s3:::amrizetesting-test-terraform-state/*",
                          [32m+[0m[0m "arn:aws:s3:::amrizetesting-test-terraform-state",
                        ]
                      [32m+[0m[0m Sid       = "EnforceTlsRequestsOnly"
                    },
                ]
              [32m+[0m[0m Version   = "2012-10-17"
            }
        )
      [32m+[0m[0m region = "us-east-1"
    }

[1m  # module.terraform_state_backend.aws_s3_bucket_public_access_block.default[0][0m will be created
[0m  [32m+[0m[0m resource "aws_s3_bucket_public_access_block" "default" {
      [32m+[0m[0m block_public_acls       = true
      [32m+[0m[0m block_public_policy     = true
      [32m+[0m[0m bucket                  = (known after apply)
      [32m+[0m[0m id                      = (known after apply)
      [32m+[0m[0m ignore_public_acls      = true
      [32m+[0m[0m region                  = "us-east-1"
      [32m+[0m[0m restrict_public_buckets = true
    }

[1m  # module.terraform_state_backend.aws_s3_bucket_server_side_encryption_configuration.default[0][0m will be created
[0m  [32m+[0m[0m resource "aws_s3_bucket_server_side_encryption_configuration" "default" {
      [32m+[0m[0m bucket = (known after apply)
      [32m+[0m[0m id     = (known after apply)
      [32m+[0m[0m region = "us-east-1"

      [32m+[0m[0m rule {
          [32m+[0m[0m apply_server_side_encryption_by_default {
              [32m+[0m[0m sse_algorithm     = "AES256"
                [90m# (1 unchanged attribute hidden)[0m[0m
            }
        }
    }

[1m  # module.terraform_state_backend.aws_s3_bucket_versioning.default[0][0m will be created
[0m  [32m+[0m[0m resource "aws_s3_bucket_versioning" "default" {
      [32m+[0m[0m bucket = (known after apply)
      [32m+[0m[0m id     = (known after apply)
      [32m+[0m[0m region = "us-east-1"

      [32m+[0m[0m versioning_configuration {
          [32m+[0m[0m mfa_delete = "Disabled"
          [32m+[0m[0m status     = "Enabled"
        }
    }

[1m  # module.terraform_state_backend.local_file.terraform_backend_config[0][0m will be created
[0m  [32m+[0m[0m resource "local_file" "terraform_backend_config" {
      [32m+[0m[0m content              = (known after apply)
      [32m+[0m[0m content_base64sha256 = (known after apply)
      [32m+[0m[0m content_base64sha512 = (known after apply)
      [32m+[0m[0m content_md5          = (known after apply)
      [32m+[0m[0m content_sha1         = (known after apply)
      [32m+[0m[0m content_sha256       = (known after apply)
      [32m+[0m[0m content_sha512       = (known after apply)
      [32m+[0m[0m directory_permission = "0777"
      [32m+[0m[0m file_permission      = "0644"
      [32m+[0m[0m filename             = "./backend.tf"
      [32m+[0m[0m id                   = (known after apply)
    }

[1m  # module.terraform_state_backend.time_sleep.wait_for_aws_s3_bucket_settings[0][0m will be created
[0m  [32m+[0m[0m resource "time_sleep" "wait_for_aws_s3_bucket_settings" {
      [32m+[0m[0m create_duration  = "30s"
      [32m+[0m[0m destroy_duration = "30s"
      [32m+[0m[0m id               = (known after apply)
    }

[1mPlan:[0m 24 to add, 0 to change, 0 to destroy.
[0m[33m╷[0m[0m
[33m│[0m [0m[1m[33mWarning: [0m[0m[1mDeprecated attribute[0m
[33m│[0m [0m
[33m│[0m [0m[0m  on .terraform/modules/terraform_state_backend/main.tf line 22, in locals:
[33m│[0m [0m  22:     region = data.aws_region.current[4m.name[0m[0m
[33m│[0m [0m
[33m│[0m [0mThe attribute "name" is deprecated. Refer to the provider documentation for details.
[33m╵[0m[0m
[90m
─────────────────────────────────────────────────────────────────────────────[0m

Note: You didn't use the -out option to save this plan, so Terraform can't
guarantee to take exactly these actions if you run "terraform apply" now.
